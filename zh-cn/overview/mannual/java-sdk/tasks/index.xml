<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – 跟随示例任务学习 Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/</link><description>Recent content in 跟随示例任务学习 Dubbo on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: 开发服务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/</guid><description>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/template/'>生成项目模板&lt;/a>
&lt;/h4>
&lt;p>使用项目脚手架快速生成微服务项目模板&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/service_reference/'>发布和引用服务&lt;/a>
&lt;/h4>
&lt;p>演示如何定义、发布和调用 Dubbo 服务。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/async/'>异步调用&lt;/a>
&lt;/h4>
&lt;p>演示 Dubbo 服务的异步调用编程模式，支持客户端异步和服务端异步。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/version_group/'>版本与分组&lt;/a>
&lt;/h4>
&lt;p>演示 Dubbo 如何通过 group、version 隔离不同版本的服务。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/context/'>上下文参数&lt;/a>
&lt;/h4>
&lt;p>演示如何在 RPC 请求中传递额外参数。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/develop/generic/'>泛化调用&lt;/a>
&lt;/h4>
&lt;p>演示 Dubbo 泛化调用的使用方式。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 部署服务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/</guid><description>
&lt;p>部署文档中增加 Linux、全托管、半托管等部署架构说明，以沿着这几种模式展开&lt;/p>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm/'>虚拟机环境部署&lt;/a>
&lt;/h4>
&lt;p>部署在虚拟机环境&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-docker/'>Docker 部署&lt;/a>
&lt;/h4>
&lt;p>部署在 docker 环境&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-k8s-docker/'>Kubernetes + Docker 部署&lt;/a>
&lt;/h4>
&lt;p>部署在 docker 环境的 kubernetes&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-k8s-containerd/'>Kubernetes + Containerd 部署&lt;/a>
&lt;/h4>
&lt;p>部署在 containerd 环境的 kubernetes &lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 流量管控</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/</guid><description>
&lt;p>此任务基于一个简单的线上商城微服务系统演示了 Dubbo 的流量管控能力。&lt;/p>
&lt;p>线上商城的架构图如下：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/traffic/shop-arc.png" alt="shop-arc">&lt;/p>
&lt;p>系统由 5 个微服务应用组成：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Frontend 商城主页&lt;/code>，作为与用户交互的 web 界面，通过调用 &lt;code>User&lt;/code>、&lt;code>Detail&lt;/code>、&lt;code>Order&lt;/code> 等提供用户登录、商品展示和订单管理等服务。&lt;/li>
&lt;li>&lt;code>User 用户服务&lt;/code>，负责用户数据管理、身份校验等。&lt;/li>
&lt;li>&lt;code>Order 订单服务&lt;/code>，提供订订单创建、订单查询等服务，依赖 &lt;code>Detail&lt;/code> 服务校验商品库存等信息。&lt;/li>
&lt;li>&lt;code>Detail 商品详情服务&lt;/code>，展示商品详情信息，调用 &lt;code>Comment&lt;/code> 服务展示用户对商品的评论记录。&lt;/li>
&lt;li>&lt;code>Comment 评论服务&lt;/code>，管理用户对商品的评论数据。&lt;/li>
&lt;/ul>
&lt;h2 id="部署商场系统">部署商场系统&lt;/h2>
&lt;p>为方便起见，我们将整个系统部署在 Kubernetes 集群，执行以下命令即可完成商城项目部署，项目源码示例在 &lt;a href="https://github.com/apache/dubbo-samples/tree/master/10-task/dubbo-samples-shop">dubbo-samples/task&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/10-task/dubbo-samples-shop/deploy/All.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整的部署架构图如下：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/traffic/shop-arc-deploy2.png" alt="shop-arc">&lt;/p>
&lt;p>&lt;code>Order 订单服务&lt;/code>有两个版本 &lt;code>v1&lt;/code> 和 &lt;code>v2&lt;/code>，&lt;code>v2&lt;/code> 是订单服务优化后发布的新版本。&lt;/p>
&lt;ul>
&lt;li>版本 v1 只是简单的创建订单，不展示订单详情&lt;/li>
&lt;li>版本 v2 在订单创建成功后会展示订单的收货地址详情&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Detail&lt;/code> 和 &lt;code>Comment&lt;/code> 服务也分别有两个版本 &lt;code>v1&lt;/code> 和 &lt;code>v2&lt;/code>，我们通过多个版本来演示流量导流后的效果。&lt;/p>
&lt;ul>
&lt;li>版本 &lt;code>v1&lt;/code> 默认为所有请求提供服务&lt;/li>
&lt;li>版本 &lt;code>v2&lt;/code> 模拟被部署在特定的区域的服务，因此 &lt;code>v2&lt;/code> 实例会带有特定的标签&lt;/li>
&lt;/ul>
&lt;p>执行以下命令，确定所有服务、Pod都已正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get services -n dubbo-demo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get pods -n dubbo-demo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了保障系统完整性，除了商城相关的几个微服务应用，示例还在后台拉起了 Nacos 注册配置中心、Dubbo Admin 控制台 和 Skywalking 全链路追踪系统。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get services -n dubbo-system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get pods -n dubbo-system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获得访问地址">获得访问地址&lt;/h2>
&lt;p>执行以下命令，将集群端口映射到本地端口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl port-forward -n dubbo-demo deployment/shop-frontend 8080:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl port-forward -n dubbo-system service/dubbo-admin 38080:38080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl port-forward -n dubbo-system service/skywalking-oap-dashboard 8082:8082
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，打开浏览器，即可通过以下地址访问：&lt;/p>
&lt;ul>
&lt;li>商城首页 &lt;code>http://localhost:8080&lt;/code>&lt;/li>
&lt;li>Dubbo Admin 控制台 &lt;code>http://localhost:38080&lt;/code>&lt;/li>
&lt;li>Skywalking 控制台 &lt;code>http://localhost:8082&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="任务项">任务项&lt;/h2>
&lt;p>接下来，试着通过如下任务项给商城增加一些流量管控规则吧。&lt;/p>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/timeout/'>调整超时时间&lt;/a>
&lt;/h4>
&lt;p>通过在运行期动态的调整服务超时时间，可以有效的应对超时设置不合理、系统突发情况等导致的服务频繁超时、服务阻塞等问题，提升系统稳定性。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/retry/'>增加重试次数&lt;/a>
&lt;/h4>
&lt;p>在服务初次调用失败后，通过重试能有效的提升总体调用成功率。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/accesslog/'>访问日志&lt;/a>
&lt;/h4>
&lt;p>访问日志可以很好的记录某台机器在某段时间内处理的所有服务请求信息，运行态动态的开启访问日志对于排查问题非常有帮助。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/region/'>同机房/区域优先&lt;/a>
&lt;/h4>
&lt;p>同机房/区域优先是指应用调用服务时，优先调用同机房/区域的服务提供者，避免了跨区域带来的网络延时，从而减少了调用的响应时间。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/isolation/'>环境隔离&lt;/a>
&lt;/h4>
&lt;p>通过为集群中的某一个或多个应用划分逻辑隔离环境，可用于灰度环境或多套测试环境搭建。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/arguments/'>参数路由&lt;/a>
&lt;/h4>
&lt;p>如基于用户 ID 路由流量，将一小部分用户请求转发到最新发布的产品版本，以验证新版本的稳定性、获取用户的产品体验反馈等。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/weight/'>权重比例&lt;/a>
&lt;/h4>
&lt;p>通过规则动态调整单个或一组机器的权重，可以在运行态改变请求流量的分布，实现动态的按比例的流量路由。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/mock/'>服务降级&lt;/a>
&lt;/h4>
&lt;p>服务降级的核心目标就是针对这些弱依赖项，在弱依赖不可用或调用失败时，通过返回降级结果尽可能的维持功能完整。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/host/'>固定机器导流&lt;/a>
&lt;/h4>
&lt;p>通过将请求固定的转发某一台提供者机器，帮助快速复现开发或线上问题。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 微服务生态</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/ecosystem/</guid><description>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/ecosystem/transaction/'>事务管理&lt;/a>
&lt;/h4>
&lt;p>本示例演示如何通过 Seata 实现分布式 Dubbo 服务的事务管理，保证数据一致性。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/ecosystem/gateway/'>网关接入&lt;/a>
&lt;/h4>
&lt;p>通过网关 http 到 dubbo 协议转换，实现前端流量接入后端 dubbo 服务。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a target="_blank" href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/registry/'>服务发现&lt;/a>
&lt;/h4>
&lt;p>Dubbo 官方支持的常见注册中心扩展实现及其使用方式。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a target="_blank" href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/'>配置中心&lt;/a>
&lt;/h4>
&lt;p>Dubbo 官方支持的常见配置中心扩展实现及其使用方式。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a target="_blank" href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/'>元数据中心&lt;/a>
&lt;/h4>
&lt;p>Dubbo 官方支持的常见元数据中心扩展实现及其使用方式。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 观测服务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/</guid><description>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>
&lt;header class="article-meta">&lt;/header>
&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/admin/'>Admin 可视化控制台&lt;/a>
&lt;/h4>
&lt;p>演示如何通过 Admin 控制台可视化管控 Dubbo 微服务集群，包括查询服务、实例运行状态、服务测试、文档管理、流量规则下发等。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/grafana/'>Grafana 可视化展示集群指标&lt;/a>
&lt;/h4>
&lt;p>演示如何通过 Grafana 可视化展示 Dubbo 集群的 Metrics 埋点监控指标。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/grafana/'>使用 Prometheus 查询指标&lt;/a>
&lt;/h4>
&lt;p>演示如何根据条件从 Prometheus 中查询 Metrics 指标。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/zipkin/'>Zipkin 全链路追踪&lt;/a>
&lt;/h4>
&lt;p>演示如果通过 Zipkin 实现对 Dubbo 服务的全链路追踪。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/skywalking/'>Skywalking 全链路追踪&lt;/a>
&lt;/h4>
&lt;p>演示如果通过 Skywalking 实现对 Dubbo 服务的全链路追踪。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/otlp/'>OTlp 全链路追踪&lt;/a>
&lt;/h4>
&lt;p>演示如果通过 OpenTelemetry 的 Otlp Collector 实现对 Dubbo 服务的全链路追踪。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 分布式事务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/trasaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/trasaction/</guid><description/></item><item><title>Overview: 通信协议</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/</guid><description>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/grpc/'>使用 Dubbo 开发 gRPC 服务&lt;/a>
&lt;/h4>
&lt;p>演示 Dubbo 如何简化 gRPC 服务开发。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/web/'>使用 Dubbo 开发 Web 应用&lt;/a>
&lt;/h4>
&lt;p>演示使用 Dubbo 对外暴露 HTTP 接口，支持 Spring Web 标准开发方式。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/springcloud/'>与 Spring Cloud 互调&lt;/a>
&lt;/h4>
&lt;p>演示如何使用 Dubbo 作为消费端调用 Spring Cloud 服务&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/multi-protocols/'>单端口多协议发布服务&lt;/a>
&lt;/h4>
&lt;p>演示如何在一个应用内发布多个使用不同协议的服务，并通过唯一的一个端口对外发布。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 限流降级</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/</guid><description>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/hystrix/'>基于 Hystrix 的熔断降级示例&lt;/a>
&lt;/h4>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/sentinel/'>基于 Sentinel 的服务限流示例&lt;/a>
&lt;/h4>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/resilience4j/'>基于 Resilience4j 的限流、熔断降级示例&lt;/a>
&lt;/h4>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 自定义扩展</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/extensibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/extensibility/</guid><description>
&lt;h2 id="dubbo-扩展设计理念">Dubbo 扩展设计理念&lt;/h2>
&lt;ul>
&lt;li>平等对待第三方的实现。在 Dubbo 中，所有内部实现和第三方实现都是平等的，用户可以基于自身业务需求，替换 Dubbo 提供的原生实现。&lt;/li>
&lt;li>每个扩展点只封装一个变化因子，最大化复用。每个扩展点的实现者，往往都只是关心一件事。如果用户有需求需要进行扩展，那么只需要对其关注的扩展点进行扩展就好，极大的减少用户的工作量。&lt;/li>
&lt;/ul>
&lt;h2 id="基于-java-spi-的扩展能力设计">基于 Java SPI 的扩展能力设计&lt;/h2>
&lt;p>Dubbo 中的扩展能力是从 JDK 标准的 SPI 扩展点发现机制加强而来，它改进了 JDK 标准的 SPI 以下问题：&lt;/p>
&lt;ul>
&lt;li>JDK 标准的 SPI 会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源。&lt;/li>
&lt;li>如果扩展点加载失败，连扩展点的名称都拿不到了。比如：JDK 标准的 ScriptEngine，通过 getName() 获取脚本类型的名称，但如果 RubyScriptEngine 因为所依赖的 jruby.jar 不存在，导致 RubyScriptEngine 类加载失败，这个失败原因被吃掉了，和 ruby 对应不起来，当用户执行 ruby 脚本时，会报不支持 ruby，而不是真正失败的原因。&lt;/li>
&lt;/ul>
&lt;p>用户能够基于 Dubbo 提供的扩展能力，很方便基于自身需求扩展其他协议、过滤器、路由等。下面介绍下 Dubbo 扩展能力的特性。&lt;/p>
&lt;ul>
&lt;li>按需加载。Dubbo 的扩展能力不会一次性实例化所有实现，而是用哪个扩展类则实例化哪个扩展类，减少资源浪费。&lt;/li>
&lt;li>增加扩展类的 IOC 能力。Dubbo 的扩展能力并不仅仅只是发现扩展服务实现类，而是在此基础上更进一步，如果该扩展类的属性依赖其他对象，则 Dubbo 会自动的完成该依赖对象的注入功能。&lt;/li>
&lt;li>增加扩展类的 AOP 能力。Dubbo 扩展能力会自动的发现扩展类的包装类，完成包装类的构造，增强扩展类的功能。&lt;/li>
&lt;li>具备动态选择扩展实现的能力。Dubbo 扩展会基于参数，在运行时动态选择对应的扩展类，提高了 Dubbo 的扩展能力。&lt;/li>
&lt;li>可以对扩展实现进行排序。能够基于用户需求，指定扩展实现的执行顺序。&lt;/li>
&lt;li>提供扩展点的 Adaptive 能力。该能力可以使的一些扩展类在 consumer 端生效，一些扩展类在 provider 端生效。&lt;/li>
&lt;/ul>
&lt;p>从 Dubbo 扩展的设计目标可以看出，Dubbo 实现的一些例如动态选择扩展实现、IOC、AOP 等特性，能够为用户提供非常灵活的扩展能力。&lt;/p>
&lt;h3 id="扩展点加载流程">扩展点加载流程&lt;/h3>
&lt;p>Dubbo 加载扩展的整个流程如下：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/concepts/extension-load.png" alt="//imgs/v3/concepts/extension-load.png">&lt;/p>
&lt;p>主要步骤为 4 个：&lt;/p>
&lt;ul>
&lt;li>读取并解析配置文件&lt;/li>
&lt;li>缓存所有扩展实现&lt;/li>
&lt;li>基于用户执行的扩展名，实例化对应的扩展实现&lt;/li>
&lt;li>进行扩展实例属性的 IOC 注入以及实例化扩展的包装类，实现 AOP 特性&lt;/li>
&lt;/ul>
&lt;h2 id="任务项">任务项&lt;/h2>
&lt;p>接下来，通过如下任务项分别来介绍 Dubbo 的扩展特性。&lt;/p>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/extensibility/filter/'>自定义过滤器&lt;/a>
&lt;/h4>
&lt;p>通过SPI机制动态加载自定义过滤器，可以对返回的结果进行统一的处理、验证等，减少对开发人员的打扰。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/extensibility/router/'>自定义路由&lt;/a>
&lt;/h4>
&lt;p>在服务调用的过程中根据实际使用场景自定义路由策略，可以有效的改善服务吞吐量和耗时。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/extensibility/protocol/'>自定义协议&lt;/a>
&lt;/h4>
&lt;p>针对不同的异构系统可以使用自定义传输协议，为系统之间的整合屏蔽了协议之间的差异。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/extensibility/registry/'>自定义注册中心&lt;/a>
&lt;/h4>
&lt;p>将不同注册中心中的服务都纳入到 Dubbo 体系中，自定义注册中心是打通异构服务体系之间的利刃。
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item><item><title>Overview: 故障排查</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/</guid><description/></item><item><title>Overview: Dubbo 集成 Graalvm参考手册</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/graalvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/graalvm/</guid><description>
&lt;p>dubbo3.0支持native-image文档&lt;/p>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>本文档将介绍将dubbo3.0项目接入GraalVM，进行native-image编译为二进制的流程。&lt;/p>
&lt;p>关于GraalVm的更多信息可以阅读 &lt;a href="https://www.graalvm.org/docs/getting-started/container-images/">https://www.graalvm.org/docs/getting-started/container-images/&lt;/a> 此文档。&lt;/p>
&lt;h2 id="使用样例">使用样例&lt;/h2>
&lt;p>在编译我们的dubbo项目之前，需要确保我们正基于graalVm的环境。&lt;/p>
&lt;ol>
&lt;li>安装GraalVM&lt;/li>
&lt;/ol>
&lt;p>进入https://www.graalvm.org/ 官网根据自己的系统选取最新版本安装：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/blog/dubbo3.0-graalvm-support/graalvmgw.jpg" alt="img">&lt;/p>
&lt;p>安装完成后，修改配置JAVA_HOME的路径，生效后查看本地jdk可以看到如下：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/blog/dubbo3.0-graalvm-support/graalvm_env.jpg" alt="img">
这里我们使用的基于jdk1.8版本的GraalVM。&lt;/p>
&lt;ul>
&lt;li>安装native-image，只需执行gu install native-image即可。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>拉取dubbo代码，切换到&lt;a href="https://github.com/apache/dubbo">apache:3.0&lt;/a>分支。&lt;/li>
&lt;li>手动执行生成SPI代码。&lt;/li>
&lt;/ol>
&lt;p>由于目前编译native-image不支持代码动态生成编译，所以有关代码动态生成的部分需要我们手动先生成，这里提供了工具函数：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/blog/dubbo3.0-graalvm-support/code_generator.jpg" alt="img">
执行CodeGenerator即可在dubbo-native模块下生成SPI代码。&lt;/p>
&lt;ol>
&lt;li>在根目录下执行install&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>MacdeMacBook&lt;span style="color:#719e07">-&lt;/span>pro&lt;span style="color:#719e07">-&lt;/span>&lt;span style="color:#2aa198">3&lt;/span>:incubator&lt;span style="color:#719e07">-&lt;/span>dubbo mac$ pwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">/&lt;/span>Users&lt;span style="color:#719e07">/&lt;/span>mac&lt;span style="color:#719e07">/&lt;/span>Documents&lt;span style="color:#719e07">/&lt;/span>Mi&lt;span style="color:#719e07">/&lt;/span>project&lt;span style="color:#719e07">/&lt;/span>incubator&lt;span style="color:#719e07">-&lt;/span>dubbo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MacdeMacBook&lt;span style="color:#719e07">-&lt;/span>pro&lt;span style="color:#719e07">-&lt;/span>&lt;span style="color:#2aa198">3&lt;/span>:incubator&lt;span style="color:#719e07">-&lt;/span>dubbo mac$ mvn clean &lt;span style="color:#719e07">package&lt;/span> install &lt;span style="color:#719e07">-&lt;/span>Dmaven.test.skip=&lt;span style="color:#cb4b16">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>编译demo项目&lt;/li>
&lt;/ol>
&lt;p>这里我们提供了可直接进行编译的示例项目，dubbo-demo/dubbo-demo-native。上面步骤install完成后，先到dubbo-demo-native的provider下，执行native-image编译：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> mvn clean &lt;span style="color:#719e07">package&lt;/span> &lt;span style="color:#719e07">-&lt;/span>P native &lt;span style="color:#719e07">-&lt;/span>Dmaven.test.skip=&lt;span style="color:#cb4b16">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里由于我们在maven中引入了native-image插件，所以直接-P native即可执行该插件。&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/blog/dubbo3.0-graalvm-support/native_image_build.jpg" alt="img">
编译成功后可以在target下看到已经生成的二进制文件，本地启动一个zookeeper，直接执行该二进制，可见启动成功如下：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/blog/dubbo3.0-graalvm-support/run_provider.jpg" alt="img">
consumer端同样执行编译，在consumer的target下也会生成二进制文件：demo-native-consumer,执行该二进制可以看到调用结果如下：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/blog/dubbo3.0-graalvm-support/run_consumer.jpg" alt="img">&lt;/p>
&lt;h3 id="具体步骤">具体步骤&lt;/h3>
&lt;p>实际上在这个demo下我们做了一些工作来确保项目可以编译执行，主要有以下几个步骤&lt;/p>
&lt;ul>
&lt;li>引入dubbo-native依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>&amp;lt;dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;artifactId&amp;gt;dubbo-native&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/dependency&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该模块下有我们生成的SPI代码。&lt;/p>
&lt;ul>
&lt;li>引入native-image插件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>&amp;lt;plugin&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;groupId&amp;gt;org.graalvm.nativeimage&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;artifactId&amp;gt;native-image-maven-plugin&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;version&amp;gt;21.0.0.2&amp;lt;/version&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;executions&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;execution&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;goals&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;goal&amp;gt;native-image&amp;lt;/goal&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/goals&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/execution&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/executions&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;imageName&amp;gt;demo-native-provider&amp;lt;/imageName&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;mainClass&amp;gt;org.apache.dubbo.demo.graalvm.provider.Application&amp;lt;/mainClass&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;buildArgs&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --no-fallback
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.slf4j.MDC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.slf4j.LoggerFactory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.apache.log4j.helpers.Loader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.apache.log4j.Logger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.apache.log4j.helpers.LogLog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.apache.log4j.LogManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.apache.log4j.spi.LoggingEvent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.slf4j.impl.Log4jLoggerFactory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.slf4j.impl.Log4jLoggerAdapter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-build-time=org.eclipse.collections.api.factory.Sets
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.epoll.Epoll
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.epoll.Native
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.DefaultFileRegion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventArray
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.kqueue.Native
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.unix.Errors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.unix.IovArray
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.unix.Limits
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.unix.Socket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --initialize-at-run-time=io.netty.channel.ChannelHandlerMask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --report-unsupported-elements-at-runtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --allow-incomplete-classpath
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --enable-url-protocols=http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -H:+ReportExceptionStackTraces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/buildArgs&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/plugin&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中定义了生成的镜像名以及一些构建镜像的参数。&lt;/p>
&lt;ul>
&lt;li>挂载native-image-agent&lt;/li>
&lt;/ul>
&lt;p>由于我们需要将一些反射、JNI等类先指定出来，我们需要先使用该agent以正常方式运行一遍生成这些类的json形式的信息。&lt;/p>
&lt;p>在启动参数中添加：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>-agentlib:native-image-agent=config-output-dir=/tmp/config/,config-write-period-secs=300,config-write-initial-delay-secs=5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以正常方式启动，在项目的resources下建立文件夹META-INF.native-image，把在本地目录中生成的文件粘进去：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/blog/dubbo3.0-graalvm-support/resources.jpg" alt="img">
（可能会有缺漏没有生成的类信息，需要根据编译或运行时的报错信息手动添加。）&lt;/p>
&lt;p>&lt;strong>完成以上几步后就可以进行项目的编译了。&lt;/strong>&lt;/p></description></item><item><title>Overview: 服务网格</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/mesh/</guid><description>
&lt;section id="section-0" style="">
&lt;div class="td-content list-page">
&lt;div class="lead">&lt;/div>&lt;header class="article-meta">
&lt;/header>&lt;div class="row">
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow" href="#">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/'>Istio &amp; Envoy Bookinfo 示例&lt;/a>
&lt;/h4>
&lt;p>演示 Dubbo 服务接入基于 Envoy 代理的 Istio 服务网格体系。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/'>Istio &amp; Proxyless Bookinfo 示例&lt;/a>
&lt;/h4>
&lt;p>演示 Dubbo Proxyless 接入 Istio 服务网格体系。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="col-sm col-md-6 mb-4">
&lt;div class="h-100 card shadow">
&lt;div class="card-body">
&lt;h4 class="card-title">
&lt;a href='https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/'>老集群平滑迁移&lt;/a>
&lt;/h4>
&lt;p>演示传统 Dubbo 微服务集群如何平滑迁移到 Istio 服务网格&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;/div>
&lt;/section></description></item></channel></rss>